{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/todo-list-item/todo-list-item.js","components/todo-list/todo-list.js","components/todo-list/index.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/item-status-filter/item-status-filter.js","components/item-status-filter/index.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/app/app.js","components/app/index.js","actions/actionCreator.js","constants.js","registerServiceWorker.js","store.js","reducers/tasks.js","reducers/filters.js","reducers/index.js","index.js"],"names":["AppHeader","toDo","done","className","TodoListItem","important","label","onToggleImportant","onToggleDone","onDelete","classNames","onClick","type","TodoList","items","elements","map","item","id","itemProps","key","this","props","Component","SearchPanel","state","term","onTermChange","e","onSearchChange","setState","target","value","placeholder","onChange","filterButtons","name","ItemStatusFilter","filter","onFilterChange","buttons","ItemAddForm","onLabelChange","onSubmit","preventDefault","onItemAdded","length","Date","getTime","App","search","filterItems","activeFilter","toLowerCase","indexOf","doneCount","toDoCount","visibleItems","searchItems","changeFilter","onToggleImportantTask","completeTask","removeTask","addTask","connect","tasks","filters","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","preloadedState","TASKS","task","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c1213ed6.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport './app-header.css';\r\n\r\nconst AppHeader = ({toDo, done}) => {\r\n  return (\r\n    <div className=\"app-header d-flex\">\r\n      <h1>Todo List</h1>\r\n      <h2>{toDo} more to do, {done} done</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\n\r\nimport './todo-list-item.css';\r\n\r\nconst TodoListItem = ({ important, done,\r\n      label, onToggleImportant, onToggleDone, onDelete }) => {\r\n\r\n  let classNames = 'todo-list-item';\r\n  if (important) {\r\n    classNames += ' important';\r\n  }\r\n\r\n  if (done) {\r\n    classNames += ' done';\r\n  }\r\n\r\n\r\n  return (\r\n    <span className={classNames}>\r\n      <span\r\n        className=\"todo-list-item-label\"\r\n        onClick={onToggleDone}>{label}</span>\r\n\r\n      <button type=\"button\"\r\n              className=\"btn btn-outline-success btn-sm float-right\"\r\n              onClick={onToggleImportant}>\r\n        <i className=\"fa fa-exclamation\"></i>\r\n      </button>\r\n\r\n      <button type=\"button\"\r\n              className=\"btn btn-outline-danger btn-sm float-right\"\r\n              onClick={onDelete}>\r\n        <i className=\"fa fa-trash-o\"></i>\r\n      </button>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import React, { Component } from \"react\";\r\n\r\nimport TodoListItem from \"../todo-list-item/todo-list-item\";\r\n\r\nimport \"./todo-list.css\";\r\n\r\nconst TodoList = ({ items, onToggleImportant, onToggleDone, onDelete }) => {\r\n  const elements = items.map(item => {\r\n    const { id, ...itemProps } = item;\r\n    return (\r\n      <li key={id} className=\"list-group-item\">\r\n        <TodoListItem\r\n          {...itemProps}\r\n          onToggleImportant={() => onToggleImportant(id)}\r\n          onToggleDone={() => onToggleDone(id)}\r\n          onDelete={() => onDelete(id)}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return <ul className=\"todo-list list-group\">{elements}</ul>;\r\n};\r\n\r\nclass TodoListContainer extends Component {\r\n  render() {\r\n    const items = this.props.items;\r\n\r\n    if (!items) {\r\n      return <h1>Loading items</h1>;\r\n    }\r\n    return <TodoList items={items} {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default TodoListContainer;\r\n","import TodoList from './todo-list';\r\n\r\nexport default TodoList;\r\n","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./search-panel.css\";\r\n\r\nexport default class SearchPanel extends Component {\r\n  state = {\r\n    term: \"\",\r\n  };\r\n\r\n  onTermChange = (e) => {\r\n    const { onSearchChange = () => {} } = this.props;\r\n    this.setState({\r\n      term: e.target.value,\r\n    });\r\n\r\n    onSearchChange(e.target.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control search-input\"\r\n        placeholder=\"type to search\"\r\n        value={this.state.term}\r\n        onChange={this.onTermChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst filterButtons = [\r\n  { name: 'all', label: 'All' },\r\n  { name: 'active', label: 'Active' },\r\n  { name: 'done', label: 'Done' }\r\n];\r\n\r\nconst ItemStatusFilter = ({filter, onFilterChange = () => {}}) => {\r\n\r\n  const buttons = filterButtons.map(({name, label}) => {\r\n    const isActive = name === filter;\r\n    const classNames = 'btn ' + (isActive ? 'btn-info' : 'btn-outline-secondary');\r\n\r\n    return (\r\n      <button key={name}\r\n              type=\"button\"\r\n              onClick={() => onFilterChange(name)}\r\n              className={classNames}>{label}</button>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      { buttons }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemStatusFilter;\r\n","import ItemStatusFilter from './item-status-filter';\r\n\r\nexport default ItemStatusFilter;\r\n","import ItemAddForm from './item-add-form';\r\n\r\nexport default ItemAddForm;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./item-add-form.css\";\r\n\r\nexport default class ItemAddForm extends Component {\r\n  state = {\r\n    label: \"\"\r\n  };\r\n\r\n  onLabelChange = e => {\r\n    this.setState({\r\n      label: e.target.value\r\n    });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const { label } = this.state;\r\n    const { onItemAdded } = this.props;\r\n    if (label.length > 3) {\r\n      onItemAdded(new Date().getTime(), label, false, false);\r\n\r\n      this.setState({ label: \"\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"bottom-panel d-flex\" onSubmit={this.onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control new-todo-label\"\r\n          value={this.state.label}\r\n          onChange={this.onLabelChange}\r\n          placeholder=\"What needs to be done?\"\r\n        />\r\n\r\n        <button type=\"submit\" className=\"btn btn-outline-secondary\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport AppHeader from \"../app-header\";\r\nimport TodoList from \"../todo-list\";\r\nimport SearchPanel from \"../search-panel\";\r\nimport ItemStatusFilter from \"../item-status-filter\";\r\nimport ItemAddForm from \"../item-add-form\";\r\nimport {\r\n  addTask,\r\n  removeTask,\r\n  completeTask,\r\n  onToggleImportantTask,\r\n  changeFilter\r\n} from \"../../actions/actionCreator\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./app.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    search: \"\"\r\n  };\r\n\r\n  filterItems = (items, activeFilter) => {\r\n    switch (activeFilter) {\r\n      case \"done\":\r\n        return items.filter(items => items.done);\r\n      case \"active\":\r\n        return items.filter(items => !items.done);\r\n      default:\r\n        return items;\r\n    }\r\n  };\r\n\r\n  onSearchChange = search => {\r\n    this.setState({ search });\r\n  };\r\n\r\n  searchItems(items, search) {\r\n    if (search.length === 0) {\r\n      return items;\r\n    }\r\n\r\n    return items.filter(item => {\r\n      return item.label.toLowerCase().indexOf(search.toLowerCase()) > -1;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { search } = this.state;\r\n    const { items, filter } = this.props;\r\n    const doneCount = items.filter(item => item.done).length;\r\n    const toDoCount = items.length - doneCount;\r\n    const visibleItems = this.searchItems(\r\n      this.filterItems(items, filter),\r\n      search\r\n    );\r\n\r\n    return (\r\n      <div className=\"todo-app\">\r\n        <AppHeader toDo={toDoCount} done={doneCount} />\r\n\r\n        <div className=\"search-panel d-flex\">\r\n          <SearchPanel onSearchChange={this.onSearchChange} />\r\n          <ItemStatusFilter\r\n            filter={filter}\r\n            onFilterChange={this.props.changeFilter}\r\n          />\r\n        </div>\r\n\r\n        <TodoList\r\n          items={visibleItems}\r\n          onToggleImportant={this.props.onToggleImportantTask}\r\n          onToggleDone={this.props.completeTask}\r\n          onDelete={this.props.removeTask}\r\n        />\r\n\r\n        <ItemAddForm onItemAdded={this.props.addTask} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  state => ({\r\n    items: state.tasks,\r\n    filter: state.filters\r\n  }),\r\n  {\r\n    addTask,\r\n    removeTask,\r\n    completeTask,\r\n    onToggleImportantTask,\r\n    changeFilter\r\n  }\r\n)(App);\r\n","import App from './app';\r\n\r\nexport default App;\r\n","import {\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  COMPLETE_TASK,\r\n  ON_TOGGLE_IMPORTANT_TASK,\r\n  CHANGE_FILTER\r\n} from \"../constants\";\r\n\r\nexport const addTask = (id, label, important, done) => ({\r\n  type: ADD_TASK,\r\n  id,\r\n  label,\r\n  important,\r\n  done\r\n});\r\nexport const removeTask = id => ({\r\n  type: REMOVE_TASK,\r\n  id\r\n});\r\n\r\nexport const completeTask = id => ({\r\n  type: COMPLETE_TASK,\r\n  id\r\n});\r\nexport const onToggleImportantTask = id => ({\r\n  type: ON_TOGGLE_IMPORTANT_TASK,\r\n  id\r\n});\r\n\r\nexport const changeFilter = activeFilter => ({\r\n  type: CHANGE_FILTER,\r\n  activeFilter\r\n});\r\n","export const ADD_TASK = \"ADD_TASK\";\r\nexport const REMOVE_TASK = \"REMOVE_TASK\";\r\nexport const COMPLETE_TASK = \"COMPLETE_TASK\";\r\nexport const ON_TOGGLE_IMPORTANT_TASK = \"ON_TOGGLE_IMPORTANT_TASK\";\r\n\r\nexport const CHANGE_FILTER = \"CHANGE_FILTER\";\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, compose } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== \"production\" &&\r\n  typeof window === \"object\" &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n/* eslint-enable */\r\n\r\nconst configureStore = preloadedState =>\r\n  createStore(rootReducer, preloadedState, composeEnhancers());\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;\r\n","import {\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  COMPLETE_TASK,\r\n  ON_TOGGLE_IMPORTANT_TASK\r\n} from \"../constants\";\r\n\r\nconst TASKS = [\r\n  { id: 1, label: \"Make react project\", important: false, done: false },\r\n  { id: 2, label: \"Add Redux\", important: true, done: false },\r\n  { id: 3, label: \"Add styles\", important: false, done: false }\r\n];\r\n\r\nconst tasks = (state = TASKS, { id, label, important, done, type }) => {\r\n  switch (type) {\r\n    case ADD_TASK:\r\n      return [\r\n        ...state,\r\n        {\r\n          id,\r\n          label,\r\n          important,\r\n          done\r\n        }\r\n      ];\r\n    case REMOVE_TASK:\r\n      return [...state].filter(task => task.id !== id);\r\n\r\n    case COMPLETE_TASK:\r\n      return [...state].map(task => {\r\n        if (task.id === id) {\r\n          task.done = !task.done;\r\n        }\r\n        return task;\r\n      });\r\n    case ON_TOGGLE_IMPORTANT_TASK:\r\n      return [...state].map(task => {\r\n        if (task.id === id) {\r\n          task.important = !task.important;\r\n        }\r\n        return task;\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default tasks;\r\n","import { CHANGE_FILTER } from \"../constants\";\r\n\r\nconst BASE_FILTER = \"all\";\r\n\r\nconst filter = (state = BASE_FILTER, { type, activeFilter }) => {\r\n  switch (type) {\r\n    case CHANGE_FILTER:\r\n      return activeFilter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default filter;\r\n","import { combineReducers } from \"redux\";\r\nimport tasks from \"./tasks\";\r\nimport filters from \"./filters\";\r\n\r\nconst rootReducer = combineReducers({ tasks, filters });\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/app\";\r\n\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}